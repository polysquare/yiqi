/*
 * tools_declarations.h.in
 * Skeleton for autogenerated file tools_declarations.h
 * which provides identifiers and constructor forward declarations
 * for all available tools on the platform in which yiqi is
 * being built for
 *
 * See LICENCE.md for Copyright information
 */
#ifndef YIQI_TOOLS_DECLARATION_H
#define YIQI_TOOLS_DECLARATION_H

#define INSTRUMENTATION_TOOLS_PROGRAM_DECL // DEL
#define INSTRUMENTATION_TOOLS_ID_DECL // DEL
#define INSTRUMENTATION_TOOLS_CONTROLLER_DECL // DEL
#define INSTRUMENTATION_TOOLS_N 0 // DEL

#include <array>
#include <memory>

namespace yiqi
{
    namespace instrumentation
    {
        namespace tools
        {
            class Program;
            class Controller;
            struct FactoryPackage;

            namespace programs
            {
                typedef std::unique_ptr <tools::Program> Unique;

                INSTRUMENTATION_TOOLS_PROGRAM_DECL
            }

            namespace controllers
            {
                typedef std::unique_ptr <tools::Controller> Unique;

                INSTRUMENTATION_TOOLS_CONTROLLER_DECL
            }

            std::array <FactoryPackage, INSTRUMENTATION_TOOLS_N> const &
            FactoryPackagesArray ();
        }
    }

    namespace constants
    {
        enum class InstrumentationTool
        {
            INSTRUMENTATION_TOOLS_ID_DECL
        };

        struct InstrumentationToolName;
        typedef std::array <InstrumentationToolName,
                            INSTRUMENTATION_TOOLS_N> ToolsArray;

        ToolsArray const & InstrumentationToolNames ();
        size_t NumberOfAvailableTools ();
    }
}

#endif